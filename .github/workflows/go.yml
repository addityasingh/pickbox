# Pickbox CI/CD Pipeline
# Comprehensive testing, building, and coverage reporting for the distributed storage system

name: Pickbox CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run unit tests
      run: go test -v -race -short -coverprofile=coverage.out -covermode=atomic ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./pkg/storage ./cmd/multi_replication

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        chmod +x scripts/tests/*.sh

    - name: Run comprehensive test suite
      run: ./scripts/run_tests.sh

    - name: Run integration tests
      run: |
        cd test
        go test -v -timeout=300s .

    - name: Test replication scenarios
      run: ./scripts/tests/test_multi_replication.sh

    - name: Upload integration test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs
        path: |
          /tmp/pickbox-*
          data/

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Build replication binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p bin
        go build -v -o bin/replication-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/replication

    - name: Build live_replication binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -v -o bin/live_replication-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/live_replication

    - name: Build multi_replication binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -v -o bin/multi_replication-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/multi_replication

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pickbox-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run go vet
      run: go vet ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, integration-test, build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts

    - name: Get version from git tag or commit
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=dev-$(echo $GITHUB_SHA | head -c7)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Pickbox ${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        files: ./artifacts/**/*
        body: |
          ## Pickbox Distributed Storage System
          
          ### Features
          - Multi-directional file replication
          - Strong consistency via Raft consensus
          - Real-time file synchronization
          - Content deduplication with SHA-256
          - Comprehensive test coverage
          
          ### Binaries
          Download the appropriate binary for your platform below.
          
          ### Test Coverage
          - Unit Tests: 82.1% coverage
          - Integration Tests: Full end-to-end scenarios
          - Performance Tests: Benchmarks included
          
          Built from commit: ${{ github.sha }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, integration-test, build, security]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.integration-test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All CI/CD pipeline steps completed successfully!"
        echo "- Unit tests passed"
        echo "- Integration tests passed" 
        echo "- All binaries built successfully"
        echo "- Security scan completed"

    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.integration-test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "- Test result: ${{ needs.test.result }}"
        echo "- Integration test result: ${{ needs.integration-test.result }}"
        echo "- Build result: ${{ needs.build.result }}"
        echo "- Security scan result: ${{ needs.security.result }}"
        exit 1
